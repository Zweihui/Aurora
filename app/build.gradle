import com.zwh.plugin.AspectjPlugin

apply plugin: 'com.android.application'
apply from: 'tinkerpatch.gradle'
apply from: 'tinkerpatch.gradle'

android {
    signingConfigs {
        release {
            keyAlias 'keystore'
            keyPassword 'zwh12583258'
            storeFile file('C:/Users/Administrator/Desktop/keystore.jks')
            storePassword 'zwh12583258'
        }
    }
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        multiDexEnabled true
        applicationId "com.zwh.mvparms.eyepetizer"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        flavorDimensions "versionCode"
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [BUGLY_APP_CHANNEL_VALUE:"other"]
    }
    packagingOptions {
        //打包时的相关配置
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
    buildTypes {

        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            minifyEnabled false
            multiDexEnabled true
            multiDexKeepProguard file('multiDexKeep.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters "armeabi-v7a"
                abiFilters "armeabi"
                abiFilters "x86"
                abiFilters "x86_64"
            }
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            multiDexEnabled true
            multiDexKeepProguard file('multiDexKeep.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters "armeabi-v7a"
                abiFilters "armeabi"
            }
        }
    }
    productFlavors {
        baidu {

            manifestPlaceholders = [BUGLY_APP_CHANNEL_VALUE:"baidu"]

        }
        fir {

            manifestPlaceholders = [BUGLY_APP_CHANNEL_VALUE:"fir"]

        }
        xiaomi {

            manifestPlaceholders = [BUGLY_APP_CHANNEL_VALUE:"xiaomi"]

        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (variant.buildType.name.equals('release')) {
                //生成apk名字的格式：Channel1.0.0_2016-06-22_baidu.apk
                //可自定义自己想要生成的格式
                def fileName = "Channel${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                outputFileName = new File(outputFile.parent, fileName)
            }
        }
    }


    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    productFlavors {
        sunny {
            signingConfig signingConfigs.release
        }
    }
}

buildscript {
    repositories {
        jcenter()
    }
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //support
    implementation(rootProject.ext.dependencies["cardview-v7"]) {
        exclude module: 'support-annotations'
    }
    //tools
    provided rootProject.ext.dependencies["javax.annotation"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    //view
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    implementation rootProject.ext.dependencies["paginate"]
    //arms
    implementation project(':arms')
    //    compile 'me.jessyan:arms:2.1.5'
    implementation rootProject.ext.dependencies["multidex"]
    testImplementation rootProject.ext.dependencies["junit"]
    testImplementation rootProject.ext.dependencies["mockito-core"]
    testImplementation rootProject.ext.dependencies["robolectric"]
    testImplementation rootProject.ext.dependencies["DaggerMock"]
    androidTestImplementation  rootProject.ext.dependencies["robolectric"]
    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]
    annotationProcessor project(':apt')
    implementation project(':apt-lib')
    implementation rootProject.ext.dependencies["constraint-layout"]
    implementation rootProject.ext.dependencies["aspectjrt"]
    implementation rootProject.ext.dependencies["appbarspring"]
    implementation rootProject.ext.dependencies["BaseRecyclerViewAdapterHelper"]
    implementation rootProject.ext.dependencies["gsyVideoPlayer-java"]
    implementation rootProject.ext.dependencies["gsyVideoPlayer-armv7a"]
    implementation rootProject.ext.dependencies["gsyVideoPlayer-x86"]
    implementation rootProject.ext.dependencies["gsyVideoPlayer-arm64"]
    implementation(rootProject.ext.dependencies["bmob-sdk"]) {
        exclude group: 'com.squareup.okhttp3'
        exclude module: 'com.squareup.okio'
    }
    implementation rootProject.ext.dependencies["http-legacy"]
    implementation rootProject.ext.dependencies["bmob-sms"]
    implementation rootProject.ext.dependencies["ucrop"]
    implementation rootProject.ext.dependencies["greendao"]
    implementation rootProject.ext.dependencies["materialprogressbar"]
    implementation rootProject.ext.dependencies["filedownloader"]
    implementation rootProject.ext.dependencies["crashreport_upgrade"]
//    compile rootProject.ext.dependencies["tinkerpatch-android-sdk"]
//    provided rootProject.ext.dependencies["tinker-android-anno"]
    implementation(name: 'matisse_ucrop_1.0.0', ext: 'aar')
    implementation(name: 'progress-release', ext: 'aar')
}

apply plugin: AspectjPlugin
apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
